# 1. Отсортируйте по убыванию методом "пузырька" одномерный целочисленный массив, заданный случайными числами.
# на промежутке [-100; 100). Выведите на экран исходный и отсортированный массивы. Сортировка должна быть
# реализована в виде функции. По возможности доработайте алгоритм (сделайте его умнее).

из  случайного  импорта  randint
 время импорта
import  sys

def  bubble_sort ( сортировка ):
    counter  =  1
    пока  счетчик  <  len ( сортировка ):
        flag  =  True
        для  i  в  диапазоне ( len ( sort ) -  counter ):
            if  sort [ i ] >  sort [ i  +  1 ]:   # на уроке был знак <, что приводит к сортировке от большего к меньшему количеству
                sort [ i ], sort [ i  +  1 ] =  sort [ i  +  1 ], sort [ i ]
                flag  =  False
                счетчик  + =  1
        если  флаг :
            перерыв


size_array  =  100
array  = [ randint ( - 100 , 100 ) для  _  в  диапазоне ( size_array )]
print ( f'Исходный массив: { array } ' )

начало  =  время . perf_counter ()
bubble_sort ( массив )
стоп  =  время . perf_counter () -  начало
print ( f'Отсортированный массив: { array } ' )
print ( f'Время выполнения функции: { stop } ' )
print ( f'Занимаемая память: { sys . getsizeof ( array ) } байт ' )